4. async VS defer
 

1) head사이에 위치한다.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>js day1</title>
    <script src="day1.js"></script>
</head>
<body>
    hello
</body>
</html>
html을 파싱하다가 js를 만나면 패치 후 실행까지 한다음 다시 html을 파싱한다.

->js 파일이 크고 인터넷이 느리다면 시간이 오래걸리는 방법(좋은 방법 x)

​

​

​2) body 끝에 위치한다.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>js day1</title>
    
</head>
<body>
    hello

    <script src="day1.js"></script>
</body>
</html>
html을 모두 파싱(페이지가 모두 준비 된 후)한 후 js를 패치 후 실행한다.

->장점 : 페이지 컨텐츠를 빨리 볼 수 있음

->단점 : 페이지가 js에 의존적인이라면, DOM을 js로 이쁘게 꾸몄다면 사용자가 정상적인 페이지를 보기 전까지는 실행하는 시간이 길어진다.

 

 

3) head 사이에 있지만, async를 추가할 때

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>js day1</title>
    <script async src="day1.js"></script>
    
</head>
<body>
    hello
</body>
</html>
async는 bool타입 : 추가만 해도 true가 된다.

​

html을 파싱하며 js를 만나면 html과 동시에 패치를 한 후 js가 패치를 다한 후 바로 실행을 하게 됨(이 때 html파싱은 멈춘 상태), 실행을 완료하면 나머지 html을 파싱하기 시작한다.

->장점 : 바디 끝에 사용하는 것 보다는 다운받는 시간을 절약 가능

->단점1 : js는 html이 패치되기도 전에 실행되므로 우리가 html에 정의해놓은 요소가 아직 정의되지 않아 js에 큰 오류 발생 가능

->단점2 : 파싱하는 동안 js를 실행하기 위해 파싱을 멈추기 때문에 페이지를 보려면 오래걸림

 

 

4)head 사이에 있지만 defer을 추가할 때(가장 좋은 옵션)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>js day1</title>
    <script defer src="day1.js"></script>
    
</head>
<body>
    hello
</body>
</html>
html을 파싱하다가 js를 만나면 같이 패치를 한 후 모든 html의 파싱이 끝나야만 js를 실행한다.

​

async은 패치가 끝난 후 바로 실행을 해서 실행 시간이 제각각이지만

defer은 모든 준비가 다 끝난 후 페이지를 완벽하게 실행한다.